
Experiment 4:
Implement simple ESS and with transmitting nodes in wire-less LAN by simulationand
determine the performance with respect to transmission of packets.
Step1: Open text editor, type the below program and save with extention .tcl (prog4.tcl) 
set ns [new Simulator]
set tf [open prog4.tr w]
$ns trace-all $tf
set topo [new Topography]
$topo load_flatgrid 1000 1000
set nf [open prog4.nam w]
$ns namtrace-all-wireless $nf 1000 1000
set val(chan) Channel/WirelessChannel ;
set val(prop) Propagation/TwoRayGround ;
set val(netif) Phy/WirelessPhy ;
set val(mac) Mac/802_11 ;
set val(ifq) Queue/DropTail/PriQueue ;
set val(ll) LL ;
set val(ant) Antenna/OmniAntenna ;
set val(ifqlen) 50 ;
set val(nn) 2 ;
set val(rp) AODV ;
set val(x) 500 ;
set val(y) 400 ;
set val(stop) 10.0 ;
$ns node-config -adhocRouting $val(rp) \
-llType $val(ll) \
-macType $val(mac) \
-ifqType $val(ifq) \
-ifqLen $val(ifqlen) \
-antType $val(ant) \
-propType $val(prop) \
-phyType $val(netif) \
-channelType $val(chan) \
-topoInstance $topo \
-agentTrace ON \
-routerTrace ON \macTrace OFF \ -movementTrace ON
create
-god 3
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
$n0 label "tcp0"
$n1 label "sink1/tcp1"
$n2 label "sink2"
$n0 set X_ 50
$n0 set Y_ 50
$n0 set Z_ 0
$n1 set X_ 100
$n1 set Y_ 100
$n1 set Z_ 0
$n2 set X_ 600
$n2 set Y_ 600
$n2 set Z_ 0
$ns at 0.1 "$n0 setdest 50 50 15"
$ns at 0.1 "$n1 setdest 100 100 25"
$ns at 0.1 "$n2 setdest 600 600 25"
set tcp0 [new Agent/TCP]
$ns attach
-agent $n0 $tcp0
set ftp0 [new Application/FTP]
$ftp0 attach
-agent $tcp0
set sink1 [new Agent/TCPSink]
$ns attach
-agent $n1 $sink1
$ns connect $tcp0 $sink1
set tcp1 [new Agent/TCP]
$ns attach
-agent $n1 $tcp1
set ftp1 [new Application/FTP]
$ftp1 attach
-agent $tcp1
set sink2 [new Agent/TCPSink]
$ns attach
-agent $n2 $sink2
$ns connect $tcp1 $sink2
$ns at 5 "$ftp0 start"
$ns at 5 "$ftp1 start"$ns at 100 "$n1 setdest 550 550 15"
$ns at 190 "$n1 setdest 70 70 15"
proc finish { } {
global ns nf tf
$ns flush-trace
exec nam prog6.nam &
close $tf
exit 0
}
$ns at 250 "finish"
$ns run
Step2: Open text editor, type the below program and save with extention .awk (prog4.awk) 
BEGIN{
count1=0
count2=0
pack1=0
pack2=0
time1=0
time2=0
}
{ if($1=="r"&& $3=="_1_" && $4=="AGT")
{ count1++
pack1=pack1+$8
time1=$2 }
if($1=="r" && $3=="_2_" && $4=="AGT")
{ count2++
pack2=pack2+$8
time2=$2 }
}
END{
printf("The Throughput from n0 to n1: %f Mbps \n", ((count1*pack1*8)/(time1*1000000)));
printf("The Throughput from n1 to n2: %f Mbps", ((count2*pack2*8)/(time2*1000000)));
}

7. Write a program for error detecting code using CRC-CCITT (16- bits).
import java.io.*;
import java.util.Scanner;
class crcscanner
{
 public static void main(String a[]) throws IOException
 {
 
 Scanner sc=new Scanner(System.in);
 int[] message;
 int[] gen;
 int[] app_message;
 int[] rem;
 int[] trans_message;
 int message_bits,gen_bits, total_bits;
 
 System.out.println("\n Enter number of bits in message : ");
 message_bits=sc.nextInt();
 message=new int[message_bits];
 System.out.println("\n Enter message bits : ");
 for(int i=0; i<message_bits; i++)
 message[i]=sc.nextInt();
 System.out.println("\n Enter number of bits in gen : ");
 gen_bits=sc.nextInt();
 
 gen=new int[gen_bits];
 System.out.println("\n Enter gen bits : ");
 for(int i=0; i<gen_bits; i++)
 {
 gen[i]=sc.nextInt();
 }
 total_bits=message_bits+gen_bits-1;
 
 app_message=new int[total_bits];
 rem=new int[total_bits];
 trans_message=new int[total_bits];
 
 for(int i=0;i<message.length;i++)
 {
 app_message[i]=message[i];
 }
 
 System.out.print("\n Message bits are : ");
 for(int i=0; i< message_bits; i++)
 {System.out.print(message[i]); 
 }
 System.out.print("\n Generators bits are : ");
 for(int i=0; i< gen_bits; i++)
 {
 System.out.print(gen[i]); 
 }
 
 System.out.print("\n Appended message is : ");
 for(int i=0; i< app_message.length; i++)
 {
System.out.print(app_message[i]); 
 }
 
 
 for(int j=0; j<app_message.length; j++)
 {
 rem[j] = app_message[j];
 }
 
 rem=computecrc(app_message, gen, rem);
 
 for(int i=0;i<app_message.length;i++) 
 {
 trans_message[i]=(app_message[i]^rem[i]);
 }
 
 System.out.println("\n Transmitted message from the transmitter is : "); 
 for(int i=0;i<trans_message.length;i++)
 {
 System.out.print(trans_message[i]);
 }
 
 System.out.println("\n Enter received message of "+total_bits+" bits at receiver end : ");
 for(int i=0; i<trans_message.length; i++)
 {
 trans_message[i]=sc.nextInt();;
 }
 System.out.println("\n Received message is :");
 for(int i=0; i< trans_message.length; i++)
 {
 System.out.print(trans_message[i]); 
 }
 
 for(int j=0; j<trans_message.length; j++)
 {
 rem[j] = trans_message[j];
 }
 rem=computecrc(trans_message, gen, rem);
 for(int i=0; i< rem.length; i++){
 if(rem[i]!=0)
 
 {
 System.out.println("\n There is Error in the received me ");
 break;
 }
 if(i==rem.length-1)
 
 System.out.println("\n There is No Error in the received m ");
 }
}
 static int[] computecrc(int app_message[],int gen[], int rem[])
{
 int current=0;
 while(true)
 {
 for(int i=0;i<gen.length;i++)
 {
 rem[current+i]=(rem[current+i]^gen[i]);
 }
 while(rem[current]==0 && current!=rem.length-1)
 {
 current++;
}
 if((rem.length-current)<gen.length)
 {
 break;
}
 }
 return rem;
}
}
